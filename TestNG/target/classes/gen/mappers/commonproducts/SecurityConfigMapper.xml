<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="gen.mappers.commonproducts.SecurityConfigDAO" >
  <!--
   WARNING  - DONT MODIFY ANY GENERATED ELEMENTS IN THIS FILE
   if you want to add  new function ,plesae add a new element without  mbggenerated annotation marked comment
   the file generated by MyBatis Generator.
   @author bohr.qiu
  -->
  <resultMap id="BaseResultMap" type="gen.doproject.commonproducts.SecurityConfigDO" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="raw_add_time" property="rawAddTime" jdbcType="TIMESTAMP" />
    <result column="raw_update_time" property="rawUpdateTime" jdbcType="TIMESTAMP" />
    <result column="cipher_algorithm" property="cipherAlgorithm" jdbcType="VARCHAR" />
    <result column="cipher_charset" property="cipherCharset" jdbcType="VARCHAR" />
    <result column="mode" property="mode" jdbcType="VARCHAR" />
    <result column="original_charset" property="originalCharset" jdbcType="VARCHAR" />
    <result column="security_user" property="securityUser" jdbcType="VARCHAR" />
    <result column="signature_algorithm" property="signatureAlgorithm" jdbcType="VARCHAR" />
    <result column="signature_charset" property="signatureCharset" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="gen.doproject.commonproducts.SecurityConfigWithBLOBs" extends="BaseResultMap" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    <result column="cipher_salt" property="cipherSalt" jdbcType="LONGVARBINARY" />
    <result column="counter_signature_key" property="counterSignatureKey" jdbcType="LONGVARBINARY" />
    <result column="decrypt_key" property="decryptKey" jdbcType="LONGVARBINARY" />
    <result column="encrypt_key" property="encryptKey" jdbcType="LONGVARBINARY" />
    <result column="signature_key" property="signatureKey" jdbcType="LONGVARBINARY" />
    <result column="signature_salt" property="signatureSalt" jdbcType="LONGVARBINARY" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    id, raw_add_time, raw_update_time, cipher_algorithm, cipher_charset, mode, original_charset, 
    security_user, signature_algorithm, signature_charset
  </sql>
  <sql id="Blob_Column_List" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    cipher_salt, counter_signature_key, decrypt_key, encrypt_key, signature_key, signature_salt
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="gen.doproject.commonproducts.SecurityConfigDOExample" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from security_config
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="gen.doproject.commonproducts.SecurityConfigDOExample" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from security_config
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from security_config
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    delete from security_config
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="gen.doproject.commonproducts.SecurityConfigDOExample" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    delete from security_config
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="gen.doproject.commonproducts.SecurityConfigWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into security_config (raw_add_time, raw_update_time, cipher_algorithm, 
      cipher_charset, mode, original_charset, 
      security_user, signature_algorithm, signature_charset, 
      cipher_salt, counter_signature_key, 
      decrypt_key, encrypt_key, signature_key, 
      signature_salt)
    values (#{rawAddTime,jdbcType=TIMESTAMP}, #{rawUpdateTime,jdbcType=TIMESTAMP}, #{cipherAlgorithm,jdbcType=VARCHAR}, 
      #{cipherCharset,jdbcType=VARCHAR}, #{mode,jdbcType=VARCHAR}, #{originalCharset,jdbcType=VARCHAR}, 
      #{securityUser,jdbcType=VARCHAR}, #{signatureAlgorithm,jdbcType=VARCHAR}, #{signatureCharset,jdbcType=VARCHAR}, 
      #{cipherSalt,jdbcType=LONGVARBINARY}, #{counterSignatureKey,jdbcType=LONGVARBINARY}, 
      #{decryptKey,jdbcType=LONGVARBINARY}, #{encryptKey,jdbcType=LONGVARBINARY}, #{signatureKey,jdbcType=LONGVARBINARY}, 
      #{signatureSalt,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="gen.doproject.commonproducts.SecurityConfigWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into security_config
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="rawAddTime != null" >
        raw_add_time,
      </if>
      <if test="rawUpdateTime != null" >
        raw_update_time,
      </if>
      <if test="cipherAlgorithm != null" >
        cipher_algorithm,
      </if>
      <if test="cipherCharset != null" >
        cipher_charset,
      </if>
      <if test="mode != null" >
        mode,
      </if>
      <if test="originalCharset != null" >
        original_charset,
      </if>
      <if test="securityUser != null" >
        security_user,
      </if>
      <if test="signatureAlgorithm != null" >
        signature_algorithm,
      </if>
      <if test="signatureCharset != null" >
        signature_charset,
      </if>
      <if test="cipherSalt != null" >
        cipher_salt,
      </if>
      <if test="counterSignatureKey != null" >
        counter_signature_key,
      </if>
      <if test="decryptKey != null" >
        decrypt_key,
      </if>
      <if test="encryptKey != null" >
        encrypt_key,
      </if>
      <if test="signatureKey != null" >
        signature_key,
      </if>
      <if test="signatureSalt != null" >
        signature_salt,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="rawAddTime != null" >
        #{rawAddTime,jdbcType=TIMESTAMP},
      </if>
      <if test="rawUpdateTime != null" >
        #{rawUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="cipherAlgorithm != null" >
        #{cipherAlgorithm,jdbcType=VARCHAR},
      </if>
      <if test="cipherCharset != null" >
        #{cipherCharset,jdbcType=VARCHAR},
      </if>
      <if test="mode != null" >
        #{mode,jdbcType=VARCHAR},
      </if>
      <if test="originalCharset != null" >
        #{originalCharset,jdbcType=VARCHAR},
      </if>
      <if test="securityUser != null" >
        #{securityUser,jdbcType=VARCHAR},
      </if>
      <if test="signatureAlgorithm != null" >
        #{signatureAlgorithm,jdbcType=VARCHAR},
      </if>
      <if test="signatureCharset != null" >
        #{signatureCharset,jdbcType=VARCHAR},
      </if>
      <if test="cipherSalt != null" >
        #{cipherSalt,jdbcType=LONGVARBINARY},
      </if>
      <if test="counterSignatureKey != null" >
        #{counterSignatureKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="decryptKey != null" >
        #{decryptKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="encryptKey != null" >
        #{encryptKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="signatureKey != null" >
        #{signatureKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="signatureSalt != null" >
        #{signatureSalt,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="gen.doproject.commonproducts.SecurityConfigDOExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    select count(*) from security_config
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    update security_config
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.rawAddTime != null" >
        raw_add_time = #{record.rawAddTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.rawUpdateTime != null" >
        raw_update_time = #{record.rawUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.cipherAlgorithm != null" >
        cipher_algorithm = #{record.cipherAlgorithm,jdbcType=VARCHAR},
      </if>
      <if test="record.cipherCharset != null" >
        cipher_charset = #{record.cipherCharset,jdbcType=VARCHAR},
      </if>
      <if test="record.mode != null" >
        mode = #{record.mode,jdbcType=VARCHAR},
      </if>
      <if test="record.originalCharset != null" >
        original_charset = #{record.originalCharset,jdbcType=VARCHAR},
      </if>
      <if test="record.securityUser != null" >
        security_user = #{record.securityUser,jdbcType=VARCHAR},
      </if>
      <if test="record.signatureAlgorithm != null" >
        signature_algorithm = #{record.signatureAlgorithm,jdbcType=VARCHAR},
      </if>
      <if test="record.signatureCharset != null" >
        signature_charset = #{record.signatureCharset,jdbcType=VARCHAR},
      </if>
      <if test="record.cipherSalt != null" >
        cipher_salt = #{record.cipherSalt,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.counterSignatureKey != null" >
        counter_signature_key = #{record.counterSignatureKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.decryptKey != null" >
        decrypt_key = #{record.decryptKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.encryptKey != null" >
        encrypt_key = #{record.encryptKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.signatureKey != null" >
        signature_key = #{record.signatureKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.signatureSalt != null" >
        signature_salt = #{record.signatureSalt,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    update security_config
    set id = #{record.id,jdbcType=BIGINT},
      raw_add_time = #{record.rawAddTime,jdbcType=TIMESTAMP},
      raw_update_time = #{record.rawUpdateTime,jdbcType=TIMESTAMP},
      cipher_algorithm = #{record.cipherAlgorithm,jdbcType=VARCHAR},
      cipher_charset = #{record.cipherCharset,jdbcType=VARCHAR},
      mode = #{record.mode,jdbcType=VARCHAR},
      original_charset = #{record.originalCharset,jdbcType=VARCHAR},
      security_user = #{record.securityUser,jdbcType=VARCHAR},
      signature_algorithm = #{record.signatureAlgorithm,jdbcType=VARCHAR},
      signature_charset = #{record.signatureCharset,jdbcType=VARCHAR},
      cipher_salt = #{record.cipherSalt,jdbcType=LONGVARBINARY},
      counter_signature_key = #{record.counterSignatureKey,jdbcType=LONGVARBINARY},
      decrypt_key = #{record.decryptKey,jdbcType=LONGVARBINARY},
      encrypt_key = #{record.encryptKey,jdbcType=LONGVARBINARY},
      signature_key = #{record.signatureKey,jdbcType=LONGVARBINARY},
      signature_salt = #{record.signatureSalt,jdbcType=LONGVARBINARY}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    update security_config
    set id = #{record.id,jdbcType=BIGINT},
      raw_add_time = #{record.rawAddTime,jdbcType=TIMESTAMP},
      raw_update_time = #{record.rawUpdateTime,jdbcType=TIMESTAMP},
      cipher_algorithm = #{record.cipherAlgorithm,jdbcType=VARCHAR},
      cipher_charset = #{record.cipherCharset,jdbcType=VARCHAR},
      mode = #{record.mode,jdbcType=VARCHAR},
      original_charset = #{record.originalCharset,jdbcType=VARCHAR},
      security_user = #{record.securityUser,jdbcType=VARCHAR},
      signature_algorithm = #{record.signatureAlgorithm,jdbcType=VARCHAR},
      signature_charset = #{record.signatureCharset,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="gen.doproject.commonproducts.SecurityConfigWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    update security_config
    <set >
      <if test="rawAddTime != null" >
        raw_add_time = #{rawAddTime,jdbcType=TIMESTAMP},
      </if>
      <if test="rawUpdateTime != null" >
        raw_update_time = #{rawUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="cipherAlgorithm != null" >
        cipher_algorithm = #{cipherAlgorithm,jdbcType=VARCHAR},
      </if>
      <if test="cipherCharset != null" >
        cipher_charset = #{cipherCharset,jdbcType=VARCHAR},
      </if>
      <if test="mode != null" >
        mode = #{mode,jdbcType=VARCHAR},
      </if>
      <if test="originalCharset != null" >
        original_charset = #{originalCharset,jdbcType=VARCHAR},
      </if>
      <if test="securityUser != null" >
        security_user = #{securityUser,jdbcType=VARCHAR},
      </if>
      <if test="signatureAlgorithm != null" >
        signature_algorithm = #{signatureAlgorithm,jdbcType=VARCHAR},
      </if>
      <if test="signatureCharset != null" >
        signature_charset = #{signatureCharset,jdbcType=VARCHAR},
      </if>
      <if test="cipherSalt != null" >
        cipher_salt = #{cipherSalt,jdbcType=LONGVARBINARY},
      </if>
      <if test="counterSignatureKey != null" >
        counter_signature_key = #{counterSignatureKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="decryptKey != null" >
        decrypt_key = #{decryptKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="encryptKey != null" >
        encrypt_key = #{encryptKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="signatureKey != null" >
        signature_key = #{signatureKey,jdbcType=LONGVARBINARY},
      </if>
      <if test="signatureSalt != null" >
        signature_salt = #{signatureSalt,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="gen.doproject.commonproducts.SecurityConfigWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    update security_config
    set raw_add_time = #{rawAddTime,jdbcType=TIMESTAMP},
      raw_update_time = #{rawUpdateTime,jdbcType=TIMESTAMP},
      cipher_algorithm = #{cipherAlgorithm,jdbcType=VARCHAR},
      cipher_charset = #{cipherCharset,jdbcType=VARCHAR},
      mode = #{mode,jdbcType=VARCHAR},
      original_charset = #{originalCharset,jdbcType=VARCHAR},
      security_user = #{securityUser,jdbcType=VARCHAR},
      signature_algorithm = #{signatureAlgorithm,jdbcType=VARCHAR},
      signature_charset = #{signatureCharset,jdbcType=VARCHAR},
      cipher_salt = #{cipherSalt,jdbcType=LONGVARBINARY},
      counter_signature_key = #{counterSignatureKey,jdbcType=LONGVARBINARY},
      decrypt_key = #{decryptKey,jdbcType=LONGVARBINARY},
      encrypt_key = #{encryptKey,jdbcType=LONGVARBINARY},
      signature_key = #{signatureKey,jdbcType=LONGVARBINARY},
      signature_salt = #{signatureSalt,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="gen.doproject.commonproducts.SecurityConfigDO" >
    <!--
      WARNING - @mbggenerated
      DONT MODIFY!
    -->
    update security_config
    set raw_add_time = #{rawAddTime,jdbcType=TIMESTAMP},
      raw_update_time = #{rawUpdateTime,jdbcType=TIMESTAMP},
      cipher_algorithm = #{cipherAlgorithm,jdbcType=VARCHAR},
      cipher_charset = #{cipherCharset,jdbcType=VARCHAR},
      mode = #{mode,jdbcType=VARCHAR},
      original_charset = #{originalCharset,jdbcType=VARCHAR},
      security_user = #{securityUser,jdbcType=VARCHAR},
      signature_algorithm = #{signatureAlgorithm,jdbcType=VARCHAR},
      signature_charset = #{signatureCharset,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>